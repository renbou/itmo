// Code generated by "stringer -type=Token -linecomment"; DO NOT EDIT.

package lexer

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[TokenEnd-0]
	_ = x[TokenLambda-1]
	_ = x[TokenComma-2]
	_ = x[TokenColon-3]
	_ = x[TokenIdent-4]
	_ = x[TokenImply-5]
	_ = x[TokenOr-6]
	_ = x[TokenAnd-7]
	_ = x[TokenXor-8]
	_ = x[TokenNot-9]
	_ = x[TokenFalse-10]
	_ = x[TokenTrue-11]
	_ = x[TokenLParen-12]
	_ = x[TokenRParen-13]
}

const _Token_name = "epslambda,:identimplyorandxornotfalsetrue()"

var _Token_index = [...]uint8{0, 3, 9, 10, 11, 16, 21, 23, 26, 29, 32, 37, 41, 42, 43}

func (i Token) String() string {
	if i < 0 || i >= Token(len(_Token_index)-1) {
		return "Token(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Token_name[_Token_index[i]:_Token_index[i+1]]
}
